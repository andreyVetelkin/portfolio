from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import dp, bot
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from keyboards.admin_kb import keyboard_admin, keyboard_admin_only_cancel
from data_base import sqllite_db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

ID = None


class FSMAdmin(StatesGroup):
    img = State()
    name = State()
    description = State()
    price = State()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

async def isAdmin(message: types.Message):
    global ID
    ID = message.from_user.id
    await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Ö–æ–∑—è–∏–Ω', reply_markup=keyboard_admin)
    await message.delete()


async def admin_start(message: types.Message):
    if message.from_user.id == ID:
        await FSMAdmin.img.set()
        await message.reply("–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ", reply_markup=keyboard_admin_only_cancel)


async def cancel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        current_state = await state.get_state()
        if current_state is None:
            return
        else:
            await state.finish()
            await message.reply("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard_admin)


async def load_img(message: types.Message, state: FSMContext):  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∞–Ω–Ω–æ—Ç–∞—Ç—Ü–∏–µ–π!
    if message.from_user.id == ID:
        async with state.proxy() as data:  # –ö–∏–¥–∞–µ–º –≤—Å–µ –≤ —Å–ª–æ–≤–∞—Ä—å
            data['photo'] = message.photo[0].file_id  # –ë–µ—Ä–µ–º id –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ª–µ–≥–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        await FSMAdmin.next()
        await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ", reply_markup=keyboard_admin_only_cancel)


async def load_name(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['name'] = message.text
        await FSMAdmin.next()
        await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=keyboard_admin_only_cancel)


async def load_description(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['description'] = message.text
        await FSMAdmin.next()
        await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ü–µ–Ω—É", reply_markup=keyboard_admin_only_cancel)


async def load_price(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['price'] = float(message.text)

        await sqllite_db.sql_add_command(state)
        await state.finish()
        await bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", reply_markup=keyboard_admin)

async def del_callback(call : types.CallbackQuery):
    await sqllite_db.sql_delete_command(call.data.replace("del ", ""))
    await call.answer(text= f'–ó–∞–ø–∏—Å—å {call.data.replace("del ", "")} —É–¥–∞–ª–µ–Ω–∞.', show_alert= True)

async def delete_from_db(message: types.Message):
    if message.from_user.id == ID:
        list_sql = await sqllite_db.sql_select_info()
        for i in list_sql:
            await bot.send_photo(message.from_user.id, i[0], f'{i[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[2]}\n–¶–µ–Ω–∞: {i[3]}')
            await bot.send_message(message.from_user.id, text="‚¨Ü", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {i[1]}', callback_data=f'del {i[1]}')))

async def orders(message : types.Message):
    curret = await sqllite_db.sql_select_order()
    for i in curret:
        await bot.send_message(message.from_user.id, f'–ò–º—è: {i[0]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[1]}\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {i[2]}\n–ó–∞–∫–∞–∑: {i[3]}', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(f'‚¨Ü–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'delOrder {i[1]}')))

async def del_order_admin(call : types.CallbackQuery):
    await sqllite_db.sql_delete_from_order_admin(call.data.replace("delOrder ", ""))
    await call.answer(text= f'–ó–∞–∫–∞–∑ {call.data.replace("delOrder ", "")} —É–¥–∞–ª–µ–Ω.', show_alert= True)



# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(delete_from_db, commands=["–£–¥–∞–ª–∏—Ç—å_–ø–æ–∑–∏—Ü–∏—é‚ùå"])
    dp.register_callback_query_handler(del_callback,Text(startswith="del "))
    dp.register_message_handler(isAdmin, commands=['moder'], is_chat_admin=True)
    dp.register_message_handler(admin_start, commands=['–ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ–∑–∏—Ü–∏—é‚¨Ü'], state=None)
    dp.register_message_handler(cancel_handler, state="*", commands='–æ—Ç–º–µ–Ω–∞üö´')
    dp.register_message_handler(orders, commands='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å_–∑–∞–∫–∞–∑—ãüëÅ‚úâÔ∏è')
    dp.register_callback_query_handler(del_order_admin, Text(startswith="delOrder "))
    dp.register_message_handler(cancel_handler, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(load_img, content_types=['photo'], state=FSMAdmin.img)
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_message_handler(load_description, state=FSMAdmin.description)
    dp.register_message_handler(load_price, state=FSMAdmin.price)
